version: "3"

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.16.0.0/16
        gateway: 172.16.0.1

services:
  php72:
    image: ld-php72
    build:
      context: ./services/php72
      args:
        PHP_VERSION: php:${PHP72_VERSION}-fpm-alpine
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP72_EXTENSIONS}
        INSTALL_APPS: ${PHP72_INSTALL_APPS}
        TZ: "$TIMEZONE"
    container_name: php72
    expose:
      - 9501
    #extra_hosts:
    volumes:
      - ${PHP72_SSH_DIR}:/root/.ssh
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP72_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP72_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP72_LOG_DIR}:/var/log/php
      - ${DATA_DIR}/composer72:/tmp/composer
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default

#  php73:
#    image: ld-php73
#    build:
#      context: ./services/php73
#      args:
#        PHP_VERSION: php:${PHP73_VERSION}-fpm-alpine
#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#        PHP_EXTENSIONS: ${PHP73_EXTENSIONS}
#        INSTALL_APPS: ${PHP73_INSTALL_APPS}
#        TZ: "$TIMEZONE"
#    container_name: php73
#    expose:
#      - 9501
#    #extra_hosts:
#    volumes:
#      - ${PHP73_SSH_DIR}:/root/.ssh
#      - ${SOURCE_DIR}:/www/:rw
#      - ${PHP73_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#      - ${PHP73_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#      - ${PHP73_LOG_DIR}:/var/log/php
#      - ${DATA_DIR}/composer73:/tmp/composer
#    restart: always
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - default
#
#  php74:
#   image: ld-php74
#   build:
#     context: ./services/php74
#     args:
#       PHP_VERSION: php:${PHP74_VERSION}-fpm-alpine
#       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
#       PHP_EXTENSIONS: ${PHP74_EXTENSIONS}
#       INSTALL_APPS: ${PHP74_INSTALL_APPS}
#       TZ: "$TIMEZONE"
#   container_name: php74
#   expose:
#     - 9501
#   #extra_hosts:
#   volumes:
#     - ${PHP74_SSH_DIR}:/root/.ssh
#     - ${SOURCE_DIR}:/www/:rw
#     - ${PHP74_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
#     - ${PHP74_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
#     - ${PHP74_LOG_DIR}:/var/log/php
#     - ${DATA_DIR}/composer74:/tmp/composer
#   restart: always
#   cap_add:
#     - SYS_PTRACE
#   networks:
#     - default

  # php80:
  #    image: ld-php80
  #    build:
  #      context: ./services/php80
  #      args:
  #        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine3.13
  #        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}
  #        INSTALL_APPS: ${PHP80_INSTALL_APPS}
  #        TZ: "$TIMEZONE"
  #    container_name: php80
  #    expose:
  #      - 9501
  #    volumes:
  #      - ${PHP80_SSH_DIR}:/root/.ssh
  #      - ${SOURCE_DIR}:/www/:rw
  #      - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
  #      - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
  #      - ${PHP80_LOG_DIR}:/var/log/php
  #      - ${DATA_DIR}/composer80:/tmp/composer
  #    restart: always
  #    cap_add:
  #      - SYS_PTRACE
  #    networks:
  #      - default

  # php81:
  #    image: ld-php81
  #    build:
  #      context: ./services/php81
  #      args:
  #        PHP_VERSION: php:${PHP81_VERSION}-fpm-alpine3.17
  #        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #        PHP_EXTENSIONS: ${PHP81_EXTENSIONS}
  #        INSTALL_APPS: ${PHP81_INSTALL_APPS}
  #        TZ: "$TIMEZONE"
  #    container_name: php81
  #    expose:
  #      - 9501
  #    volumes:
  #      - ${PHP81_SSH_DIR}:/root/.ssh
  #      - ${SOURCE_DIR}:/www/:rw
  #      - ${PHP81_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
  #      - ${PHP81_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
  #      - ${PHP81_LOG_DIR}:/var/log/php
  #      - ${DATA_DIR}/composer81:/tmp/composer
  #    restart: always
  #    cap_add:
  #      - SYS_PTRACE
  #    networks:
  #      - default 

  php82:
    image: ld-php82
    build:
      context: ./services/php82
      args:
        PHP_VERSION: php:${PHP82_VERSION}-fpm-alpine3.17
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        PHP_EXTENSIONS: ${PHP82_EXTENSIONS}
        INSTALL_APPS: ${PHP82_INSTALL_APPS}
        TZ: "$TIMEZONE"
    container_name: php82
    expose:
      - 9501
    volumes:
      - ${PHP82_SSH_DIR}:/root/.ssh
      - ${SOURCE_DIR}:/www/:rw
      - ${PHP82_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP82_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP82_LOG_DIR}:/var/log/php
      - ${DATA_DIR}/composer82:/tmp/composer
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - default

  phpswoole:
    image: huangxianyun/easyswoole:v1
    container_name: phpswoole
    ports:
      - 8072:8072
    volumes:
      - ${SOURCE_DIR}:/www/:rw
    environment:
      TZ: "$TIMEZONE"
    platform: linux/amd64
    stdin_open: true
    tty: true
    networks:
      default:
        ipv4_address: 172.16.0.51

  redis5:
    image: redis:${REDIS5_VERSION}
    container_name: redis5
    ports:
      - "${REDIS5_HOST_PORT}:6379"
    volumes:
      - ${REDIS5_CONF_FILE}:/etc/redis.conf:ro
      - ${DATA_DIR}/redis5:/data/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf"]
    environment:
      TZ: "$TIMEZONE"
    networks:
      default:
        ipv4_address: 172.16.0.50

  # redis6:
  #   image: redis:${REDIS6_VERSION}
  #   container_name: redis6
  #   ports:
  #     - "${REDIS6_HOST_PORT}:6379"
  #   volumes:
  #     - ${REDIS6_CONF_FILE}:/etc/redis.conf:ro
  #     - ${DATA_DIR}/redis6:/data/:rw
  #   restart: always
  #   entrypoint: ["redis-server", "/etc/redis.conf"]
  #   environment:
  #     TZ: "$TIMEZONE"
  #   networks:
  #     - default

  # redis7:
  #   image: redis:${REDIS7_VERSION}
  #   container_name: redis7
  #   ports:
  #     - "${REDIS7_HOST_PORT}:6379"
  #   volumes:
  #     - ${REDIS7_CONF_FILE}:/etc/redis.conf:ro
  #     - ${DATA_DIR}/redis7:/data/:rw
  #   restart: always
  #   entrypoint: ["redis-server", "/etc/redis.conf"]
  #   environment:
  #     TZ: "$TIMEZONE"
  #   networks:
  #     - default

  mysql5:
    image: ${MYSQL5_IMAGE}:${MYSQL5_VERSION}
    container_name: mysql5
    ports:
      - "${MYSQL5_HOST_PORT}:3306"
    volumes:
      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw
      - ${MYSQL5_LOG_DIR}:/var/log/mysql/:rw
    restart: always
    networks:
      - default
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL5_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "${MYSQL5_ROOT_HOST}"
      TZ: "$TIMEZONE"

  # mysql8:
  #   image: mysql/mysql-server:${MYSQL8_VERSION}
  #   container_name: mysql8
  #   ports:
  #     - "${MYSQL8_HOST_PORT}:3306"
  #   volumes:
  #     - ${MYSQL8_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
  #     - ${DATA_DIR}/mysql8:/var/lib/mysql/:rw
  #     - ${MYSQL8_LOG_DIR}:/var/log/mysql/:rw
  #   restart: always
  #   networks:
  #     - default
  #   environment:
  #     MYSQL_ROOT_PASSWORD: "${MYSQL8_ROOT_PASSWORD}"
  #     MYSQL_ROOT_HOST: "${MYSQL8_ROOT_HOST}"
  #     TZ: "$TIMEZONE"

  nginx:
    image: ld-nginx
    build:
      context: ./services/nginx
      args:
        NGINX_VERSION: nginx:${NGINX_VERSION}
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
    container_name: nginx
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    volumes:
      - ${SOURCE_DIR}:/www/:rw
      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    environment:
      TZ: "$TIMEZONE"
    restart: always
    networks:
      default:
        ipv4_address: 172.16.0.20

#  mongo5:
#    image: mongo:${MONGODB5_VERSION}
#    container_name: mongo5
#    environment:
#        MONGO_INITDB_ROOT_USERNAME: "${MONGODB5_INITDB_ROOT_USERNAME}"
#        MONGO_INITDB_ROOT_PASSWORD: "${MONGODB5_INITDB_ROOT_PASSWORD}"
#        TZ: "$TIMEZONE"
#    volumes:
#      - ${DATA_DIR}/mongo5:/data/db:rw
#      - ${DATA_DIR}/mongo5_key:/mongo:rw
#    ports:
#       - "${MONGODB5_HOST_PORT}:27017"
#    networks:
#       - default
#    command:
#       --auth

  # python3:
  #   image: ld-python3
  #   build:
  #     context: ./services/python3
  #     args:
  #       PYTHON3_VERSION: python:${PYTHON3_VERSION}-alpine3.17
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       TZ: "$TIMEZONE"
  #   container_name: python3
  #   entrypoint: ["/usr/sbin/crond", "-f"]
  #   volumes:
  #     - ${SOURCE_DIR}:/www/:rw
  #   networks:
  #     - default
  #   cap_add:
  #     - SYS_PTRACE

  # rust:
  #   image: ld-rust
  #   build:
  #     context: ./services/rust
  #     args:
  #       RUST_VERSION: rust:${RUST_VERSION}-alpine3.17
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       TZ: "$TIMEZONE"
  #   container_name: rust
  #   entrypoint: ["/usr/sbin/crond", "-f"]
  #   volumes:
  #     - ${SOURCE_DIR}:/www/:rw
  #   networks:
  #     - default
  #   cap_add:
  #     - SYS_PTRACE

  # node16:
  #   image: ld-node16
  #   build:
  #     context: ./services/node16
  #     args:
  #       NODE_VERSION: node:${NODE16_VERSION}-alpine3.17
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       TZ: "$TIMEZONE"
  #   container_name: node16
  #   entrypoint: ["/usr/sbin/crond", "-f"]
  #   volumes:
  #     - ${SOURCE_DIR}:/www/:rw
  #   networks:
  #     - default
  #   cap_add:
  #     - SYS_PTRACE

  # node18:
  #   image: ld-node18
  #   build:
  #     context: ./services/node18
  #     args:
  #       NODE_VERSION: node:${NODE18_VERSION}-alpine3.17
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       TZ: "$TIMEZONE"
  #   container_name: node18
  #   entrypoint: ["/usr/sbin/crond", "-f"]
  #   volumes:
  #     - ${SOURCE_DIR}:/www/:rw
  #   networks:
  #     - default
  #   cap_add:
  #     - SYS_PTRACE


  go:
    image: ld-go
    build:
      context: ./services/go
      args:
        GO_VERSION: golang:${GO_VERSION}-alpine3.17
        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
        TZ: "$TIMEZONE"
    container_name: go
    entrypoint: ["/usr/sbin/crond", "-f"]
    volumes:
      - ${SOURCE_DIR}/go:/app:rw
    networks:
      - default
    cap_add:
      - SYS_PTRACE


